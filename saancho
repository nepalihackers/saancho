#!/bin/bash

prog=$(basename $0)
author="techgaun"
desc="Brutally simple command-line password manager"
version="0.0.1"
red='\033[0;31m'
green='\033[0;32m'
nc='\033[0m'

password_file="${SAANCHO_FILE:-${HOME}/.saancho.gpg}"

error() {
    msg="${1}"
    echo -e "${red}${msg}${nc}"
}

die() {
  error "$@"
  exit 1
}

msg() {
    msg="${1:-nothing}"
    echo -e "${green}${msg}${nc}"
}

check_invalid() {
  msg="${2:-Invalid passphrase. Exiting!!!}"
  [[ "$1" == "0" ]] || die "\n${msg}"
}

is_debian() {
    [[ -f "/usr/bin/apt-get" ]]
}

is_rhel() {
    [[ -f "/usr/bin/yum" ]]
}

is_arch() {
    [[ -f "/usr/bin/pacman" ]]
}

encrypt() {
  passphrase="${1}"
  creds="${2}"
  echo -e "${creds}" | ${cmd} --cipher-algo AES256 --yes --symmetric \
    --passphrase-fd 7 --batch --output $password_file - 7< <(echo "${passphrase}")
}

decrypt() {
  passphrase="${1}"
  echo "${passphrase}" | ${cmd} --cipher-algo AES256 --decrypt --batch \
    --passphrase-fd 0 $password_file 2> /dev/null
}

random_gen() {
  plen=${1:-30}
  ${cmd} --armour --gen-random 0 "${plen}" | cut -c -"${plen}"
}

saancho_create() {
  passphrase="${1}"
  title=""
  read -p "Enter the identifier for your credential: " title
  uname=""
  read -p "Enter the username for your credential: " uname
  password=""
  read -s -p "Enter the password for your credential(press ENTER for random password): " password
  if [[ "x${password}" == "x" ]]; then
    echo ""
    read -p "Enter the length of password(default: 30): " plen
    if [[ ! "${plen}" =~ ^[0-9]{1,2}$ ]]; then
      plen="30"
    fi
    password=$(random_gen $plen)
    echo ""
    echo "Your randomly generated password is: ${password}"
  fi
  cred="${title}\t${uname}\t${password}"
  prev_creds=""
  if [[ -e "${password_file}" ]]; then
    prev_creds=$(decrypt $passphrase)
    check_invalid $?
  fi
  encrypt $passphrase "${prev_creds}\n${cred}"
}

saancho_read() {
  passphrase="${1}"
  search=""
  read -p "Enter the search term(username or identifier): " search
  echo ""
  { echo -e "Identifier\tUsername\tPassword"; decrypt $passphrase | \
    grep -E "^${search}.*|^.*$(printf '\t')${search}.*"; } | column -t
  echo ""
  read -n1 -p "Press ENTER to continue"
}

saancho_delete() {
  passphrase="${1}"
  identifier=""
  read -p "Enter the identifier to delete: " identifier
  confirm=""
  read -p "Are you sure you wish to remove ${identifier}? (y/n): " confirm
  if [[ "${confirm}" =~ [yY] ]]; then
    rem=$(decrypt $passphrase | grep -vE "^${identifier}$(printf '\t')")
    check_invalid $?
    encrypt "${passphrase}" "${rem}"
    msg "Credential for ${identifier} removed!"
  fi
}

store_init() {
  confirm=""
  read -p "Are you sure you wish to remove existing credential store? (y/n): " confirm
  if [[ "${confirm}" =~ [yY] ]]; then
    rm -f $password_file && msg "Successfully removed credential store"
  fi
}

saancho_backup() {
  msg "Performing backup of ${password_file}\nThis feature is yet to be implemented!"
}

cmd=$(command -v gpg2 || command -v gpg)

if [[ "$?" -ne "0" ]]; then
  echo "Could not find gpg binary. Trying to install gpg..."
  if is_debian; then
    sudo apt install -y gnupg2
    if [[ "$?" -ne "0" ]]; then
      sudo apt install -y gnupg
    fi
  elif is_rhel; then
    sudo yum install -y gnupg2
    if [[ "$?" -ne "0" ]]; then
      sudo yum install -y gnupg
    fi
  elif is_arch; then
      sudo pacman -S gnupg
  else
    die "Unknown distribution. Please install gnupg2/gnupg for your distribution and use ${prog}."
  fi
fi

passphrase=""
read -s -p "Enter the passphrase for your saancho store: " passphrase

if [[ "x" == "x${passphrase}" ]]; then
  die "Invalid passphrase specified. Exiting!"
fi

choice=""
while [[ "${choice}" != "e" ]]; do
  echo -e "\n\nOptions available\n"
  echo -e "\tc - create new credential"
  echo -e "\tr - read existing credential"
  echo -e "\td - delete credential"
  echo -e "\tb - backup credentials"
  echo -e "\ti - delete credential file(re-initialize)"
  echo -e "\te - exit Saancho\n"

  read -p "Enter the action you wish to perform: " choice
  echo ""
  case "${choice}" in
    c|C) saancho_create "${passphrase}";;
    r|R) saancho_read "${passphrase}";;
    d|D) saancho_delete "${passphrase}";;
    b|B) saancho_backup;;
    i|I) store_init;;
    *) choice="e";;
  esac
done

msg "\nExiting saancho!!!"
